install.packages(c("caret", "ggplot2"))
install.packages("shinydashboard")
shiny::runApp('__Fun_X_Excel_Channel_Videos/R/Basic R Shiny Dashbaord')
install.packages("DT")
install.packages("ggplot2")
shiny::runApp('__Fun_X_Excel_Channel_Videos/R/Basic R Shiny Dashbaord')
runApp('__PrepCourses/R Shiny Dashboards/1 Basic App')
runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/Basic.R')
runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/2 Basic App with Input Widgets.R')
runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/3 Basic App with reactive App.R')
runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/4 Basic App with reactive and render.R')
runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/6 Basic App Layout - tabsets.R')
runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/8 Basic App Layout - name tags.R')
runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/9 Basic App Layout - changing themes.R')
install.packages("shinythemes")
runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/9 Basic App Layout - changing themes.R')
runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/9 Basic App Layout - changing themes.R')
library(shiny); runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/1 Basic App.R')
runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/1 Basic App.R')
runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/2 Basic App with Input Widgets.R')
runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/3 Basic App with reactive.R')
runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/3 Basic App with reactive.R')
runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/3 Basic App with reactive.R')
runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/4 Basic App with reactive and render.R')
library(shiny); runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/1 Basic App.R')
runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/2 Basic App with Input Widgets.R')
runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/2 Basic App with Input Widgets.R')
runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/2 Basic App with Input Widgets.R')
library(shiny); runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/3 Basic App with reactive.R')
runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/3 Basic App with reactive.R')
runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/3 Basic App with reactive.R')
runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/3 Basic App with reactive.R')
runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/3 Basic App with reactive.R')
runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/3 Basic App with reactive.R')
runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/3 Basic App with reactive.R')
runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/3 Basic App with reactive.R')
runApp('3 Basic App with reactive.R')
runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/3 Basic App with reactive.R')
runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/3 Basic App with reactive.R')
paste("sdfde","wqefdwed", " ")
runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/3 Basic App with reactive.R')
runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/4 Basic App with reactive and render.R')
runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/Sample Text.R')
runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/3 Basic App with reactive.R')
runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/3 Basic App with reactive.R')
runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/3 Basic App with reactive.R')
runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/3 Basic App with reactive.R')
runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/3 Basic App with reactive.R')
runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/3 Basic App with reactive.R')
runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/3 Basic App with reactive.R')
runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/Sample Text.R')
runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/3 Basic App with reactive.R')
library(shiny); runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/3 Basic App with reactive.R')
runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/3 Basic App with reactive.R')
runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/4 Basic App with reactive and render.R')
runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/Sample Text.R')
runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/Sample Text.R')
runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/3 Basic App with reactive.R')
runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/3 Basic App with reactive.R')
runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/3 Basic App with reactive.R')
runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/3 Basic App with reactive.R')
runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/3 Basic App with reactive.R')
runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/3 Basic App with reactive.R')
runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/3 Basic App with reactive.R')
runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/4 Basic App Plot Charts.R')
runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/4 Basic App Plot Charts.R')
runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/4 Basic App Plot Charts.R')
runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/4 Basic App Plot Charts.R')
install.packages("rlang")
install.packages("ggplot2")
library(shiny); runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/4 Basic App Plot Charts.R')
runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/4 Basic App Plot Charts.R')
runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/4 Basic App Plot Charts.R')
runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/4 Basic App Plot Charts.R')
runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/4 Basic App Plot Charts.R')
runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/4 Basic App Plot Charts.R')
runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/4 Basic App Plot Charts.R')
runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/4 Basic App Plot Charts.R')
runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/4 Basic App Plot Charts.R')
runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/4 Basic App Plot Charts with barplot.R')
library(shiny); runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/2 Basic App Text and Drop Down Inputs.R')
runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/3 Basic App Display Test From Input.R')
runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/2 Basic App Text and Drop Down Inputs.R')
runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/3 Basic App Display Test From Input.R')
library(shiny); runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/3 Basic App Display Test From Input.R')
runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/4.1 Basic App Plot Charts with barplot.R')
runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/4.2 Basic App Plot Charts with ggplot2.R')
library(shiny); runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/4.2 Basic App Plot Charts with ggplot2.R')
runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/3 Basic App Display Test From Input.R')
runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/5 Basic App Change Bar Chart based on User Input.R')
runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/5 Basic App Change Bar Chart based on User Input.R')
runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/5 Basic App Change Bar Chart based on User Input.R')
library(shiny); runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/6 Basic App Import Data.R')
runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/8 Basic App Layout - name tags.R')
runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/7 Basic App with Sidebar Layout.R')
runApp('__PrepCourses/R Shiny Dashboards/1 Basic App/7 Basic App with Sidebar Layout.R')
install.packages(c("ChoiceModelR", "mlogit"))
library(tseries)
library(forecast)
library(caret)
#Load Dataset directly
data(AirPassengers)
#Check class, it should be Time Series (ts)
class(AirPassengers)
#Check First row
start(AirPassengers)
#Check Last Row
end(AirPassengers)
#Check Frequency (daily, weekly, monthly,quarterly, yearly)
frequency(AirPassengers)
#Check summary stats
summary(AirPassengers)
#Check length
length(AirPassengers)
#Plot it on chart to inspect
plot(AirPassengers)
plot(diff(log(AirPassengers)))
#Create a Linear model based on time to see the trend
abline(reg = lm(AirPassengers~time(AirPassengers)))
#Check Cycle
cycle(AirPassengers)
#Plot Average to see it trend (moving upwards)
plot(aggregate(AirPassengers,FUN=mean))
#Check plots according to cycle
boxplot(AirPassengers~cycle(AirPassengers))
#Augmented Dickey-Fuller Test
adf.test(AirPassengers, alternative="stationary", k=0)
adf.test(diff(log(AirPassengers)), alternative="stationary", k=0)
#Find ACF
acf(AirPassengers)
acf(log(AirPassengers))
acf(diff(log(AirPassengers))) #p term or Lagged
pacf(diff(log(AirPassengers))) #q term or Moving average
(fit_test <- auto.arima(log(AirPassengers), seasonal = FALSE))
(fit <- arima(log(AirPassengers), c(0, 1, 1),seasonal = list(order = c(0, 1, 1), period = 12)))
(fit <- arima(log(AirPassengers), c(0, 1, 1),seasonal = list(order = c(0, 1, 1), period = 12)))
pred_train <- predict(fit, )
pred <- predict(fit, n.ahead = 10*12)
pred <- fit(fit)
ts.plot(AirPassengers,2.718^pred$pred, lty = c(1,3))
ts.plot(AirPassengers,2.718^pred$pred, log = "y", lty = c(1,3))
library(shiny); runApp('__Fun_X_Excel_Channel_Videos/XtremeDataScience/R Shiny Dashboards/1 Basic App/3 Basic App Display Test From Input.R')
runApp('__Fun_X_Excel_Channel_Videos/XtremeDataScience/R Shiny Dashboards/1 Basic App/4 Basic App with reactive and render.R')
runApp('__Fun_X_Excel_Channel_Videos/XtremeDataScience/R Shiny Dashboards/1 Basic App/4.1 Basic App Plot Charts with barplot.R')
runApp('__Fun_X_Excel_Channel_Videos/XtremeDataScience/R Shiny Dashboards/1 Basic App/4.2 Basic App Plot Charts with ggplot2.R')
runApp('__Fun_X_Excel_Channel_Videos/XtremeDataScience/R Shiny Dashboards/1 Basic App/5 Basic App Change Bar Chart based on User Input.R')
runApp('__Fun_X_Excel_Channel_Videos/XtremeDataScience/R Shiny Dashboards/1 Basic App/5 Basic App Layout - Basic Slider.R')
runApp('__Fun_X_Excel_Channel_Videos/XtremeDataScience/R Shiny Dashboards/1 Basic App/5 Basic App Change Bar Chart based on User Input.R')
runApp('__Fun_X_Excel_Channel_Videos/XtremeDataScience/R Shiny Dashboards/1 Basic App/5 Basic App Layout - Basic Slider.R')
runApp('__Fun_X_Excel_Channel_Videos/XtremeDataScience/R Shiny Dashboards/1 Basic App/6 Basic App Import Data.R')
runApp('__Fun_X_Excel_Channel_Videos/XtremeDataScience/R Shiny Dashboards/1 Basic App/6 Basic App Layout - tabsets.R')
library(shiny); runApp('D:/GitHub/YT_R_Shiny_Dashboards/1 Basic App/3 Basic App with reactive.R')
runApp('D:/GitHub/YT_R_Shiny_Dashboards/1 Basic App/4 Basic App with reactive and render.R')
runApp('D:/GitHub/YT_R_Shiny_Dashboards/1 Basic App/6 Basic App Layout - tabsets.R')
runApp('D:/GitHub/YT_R_Shiny_Dashboards/1 Basic App/4 Basic App with reactive and render.R')
runApp('D:/GitHub/YT_R_Shiny_Dashboards/1 Basic App/4 Basic App with reactive and render.R')
runApp('D:/GitHub/YT_R_Shiny_Dashboards/1 Basic App/4 Basic App with reactive and render.R')
runApp('D:/GitHub/YT_R_Shiny_Dashboards/1 Basic App/4 Basic App with reactive and render.R')
library(shiny); runApp('D:/GitHub/YT_R_Shiny_Dashboards/1 Basic App/6 Basic App Layout - tabsets.R')
runApp('D:/GitHub/YT_R_Shiny_Dashboards/1 Basic App/3 Basic App with reactive.R')
library(shiny); runApp('D:/GitHub/YT_R_Shiny_Dashboards/1 Basic App/4 Basic App with reactive and render.R')
runApp('D:/GitHub/YT_R_Shiny_Dashboards/1 Basic App/4 Basic App with reactive and render.R')
runApp('D:/GitHub/YT_R_Shiny_Dashboards/1 Basic App/4 Basic App with reactive and render.R')
sales = read.csv("sales.csv", header = TRUE)
sales = read.csv("Sales.csv", header = TRUE)
setwd("D:/GitHub/YT_R_Shiny_Dashboards/1 Basic App")
library(shiny)
library(dplyr)
sales = read.csv("Sales.csv", header = TRUE)
sales %>% filter(sales.SalesRep %in% input$sel_SalesRep) %>% select(sales.Units)
sales = read.csv("Sales.csv", header = TRUE,  sep = ",")
View(sales)
sales = read.csv("Sales.csv", header = TRUE,  sep = ",")
View(sales)
View(sales)
sales = read.csv("Sales.csv", header = TRUE,  sep = ",")
sales %>% filter(sales.S %in% input$sel_SalesRep) %>% select(sales.Units)
sales %>% filter(sales.SalesRep %in% input$sel_SalesRep) %>% select(sales.Units)
sales %>% filter(SalesRep %in% input$sel_SalesRep) %>% select(sales.Units)
sales %>% filter(SalesRep %in% c("Amy")) %>% select(sales.Units)
sales %>% filter(SalesRep %in% c("Amy")) %>% select(Unit_Sold)
sales %>% filter(SalesRep %in% c("Amy")) %>% select(Units_Sold)
runApp('4 Basic App with reactive and render.R')
g <- ggplot(data(), aes(class)
g <- ggplot(data(), aes(class) )
g <- ggplot(data(), aes(class))
g <- ggplot2(data(), aes(class))
library(ggplot2)
g <- ggplot(data(), aes(class))
df <- sales %>% filter(SalesRep %in% c("Amy")) %>% select(Units_Sold)
g <- ggplot(df, aes(class))
g+geom_bar()
df <- sales %>% filter(SalesRep %in% c("Amy"))
g <- ggplot(df, aes(SalesRep))
g+geom_bar()
g <- ggplot(df, aes(Region))
g+geom_bar()
g <- ggplot(df, aes(Region, Sales))
g+geom_bar()
View(df)
View(df)
g <- ggplot(df, aes(Units_Sold))
g+geom_bar()
g+geom_bar()+geom_col()
g <- ggplot(df, aes(Region,Units_Sold))
g+geom_bar()+geom_col()
g <- ggplot(df, aes( y = Units_Sold, x = Region))
g+geom_bar()
g+geom_bar(stat = "sum")
library(viridis)
library(hrbrthemes)
install.packages(c("viridis", "hrbrthemes"))
install.packages(c("viridis", "hrbrthemes"))
install.packages(c("viridis", "hrbrthemes"))
install.packages(c("viridis", "hrbrthemes"))
library(viridis)
install.packages(c("backports", "BH", "bibtex", "caret", "cli", "crosstalk", "curl", "data.table", "digest", "dplyr", "DT", "ellipsis", "fansi", "foreach", "forecast", "fracdiff", "ggplot2", "glue", "gower", "htmltools", "htmlwidgets", "httpuv", "jsonlite", "knitr", "later", "lava", "leaps", "locfit", "lubridate", "mime", "mlogit", "ModelMetrics", "openssl", "pillar", "pkgconfig", "plyr", "prodlim", "promises", "purrr", "quadprog", "quantmod", "R6", "Rcpp", "RcppArmadillo", "RCurl", "Rdpack", "recipes", "reshape2", "rlang", "rmarkdown", "rsconnect", "rstudioapi", "scales", "shiny", "SQUAREM", "statmod", "stringi", "tibble", "tidyr", "tidyselect", "tinytex", "TTR", "vctrs", "withr", "xfun", "xts", "yaml", "zoo"))
install.packages(c("backports", "BH", "bibtex", "caret", "cli", "crosstalk", "curl", "data.table", "digest", "dplyr", "DT", "ellipsis", "fansi", "foreach", "forecast", "fracdiff", "ggplot2", "glue", "gower", "htmltools", "htmlwidgets", "httpuv", "jsonlite", "knitr", "later", "lava", "leaps", "locfit", "lubridate", "mime", "mlogit", "ModelMetrics", "openssl", "pillar", "pkgconfig", "plyr", "prodlim", "promises", "purrr", "quadprog", "quantmod", "R6", "Rcpp", "RcppArmadillo", "RCurl", "Rdpack", "recipes", "reshape2", "rlang", "rmarkdown", "rsconnect", "rstudioapi", "scales", "shiny", "SQUAREM", "statmod", "stringi", "tibble", "tidyr", "tidyselect", "tinytex", "TTR", "vctrs", "withr", "xfun", "xts", "yaml", "zoo"))
install.packages(c("backports", "BH", "bibtex", "caret", "cli", "crosstalk", "curl", "data.table", "digest", "dplyr", "DT", "ellipsis", "fansi", "foreach", "forecast", "fracdiff", "ggplot2", "glue", "gower", "htmltools", "htmlwidgets", "httpuv", "jsonlite", "knitr", "later", "lava", "leaps", "locfit", "lubridate", "mime", "mlogit", "ModelMetrics", "openssl", "pillar", "pkgconfig", "plyr", "prodlim", "promises", "purrr", "quadprog", "quantmod", "R6", "Rcpp", "RcppArmadillo", "RCurl", "Rdpack", "recipes", "reshape2", "rlang", "rmarkdown", "rsconnect", "rstudioapi", "scales", "shiny", "SQUAREM", "statmod", "stringi", "tibble", "tidyr", "tidyselect", "tinytex", "TTR", "vctrs", "withr", "xfun", "xts", "yaml", "zoo"))
install.packages(c("backports", "BH", "bibtex", "caret", "cli", "crosstalk", "curl", "data.table", "digest", "dplyr", "DT", "ellipsis", "fansi", "foreach", "forecast", "fracdiff", "ggplot2", "glue", "gower", "htmltools", "htmlwidgets", "httpuv", "jsonlite", "knitr", "later", "lava", "leaps", "locfit", "lubridate", "mime", "mlogit", "ModelMetrics", "openssl", "pillar", "pkgconfig", "plyr", "prodlim", "promises", "purrr", "quadprog", "quantmod", "R6", "Rcpp", "RcppArmadillo", "RCurl", "Rdpack", "recipes", "reshape2", "rlang", "rmarkdown", "rsconnect", "rstudioapi", "scales", "shiny", "SQUAREM", "statmod", "stringi", "tibble", "tidyr", "tidyselect", "tinytex", "TTR", "vctrs", "withr", "xfun", "xts", "yaml", "zoo"))
install.packages(c("backports", "BH", "bibtex", "caret", "cli", "crosstalk", "curl", "data.table", "digest", "dplyr", "DT", "ellipsis", "fansi", "foreach", "forecast", "fracdiff", "ggplot2", "glue", "gower", "htmltools", "htmlwidgets", "httpuv", "jsonlite", "knitr", "later", "lava", "leaps", "locfit", "lubridate", "mime", "mlogit", "ModelMetrics", "openssl", "pillar", "pkgconfig", "plyr", "prodlim", "promises", "purrr", "quadprog", "quantmod", "R6", "Rcpp", "RcppArmadillo", "RCurl", "Rdpack", "recipes", "reshape2", "rlang", "rmarkdown", "rsconnect", "rstudioapi", "scales", "shiny", "SQUAREM", "statmod", "stringi", "tibble", "tidyr", "tidyselect", "tinytex", "TTR", "vctrs", "withr", "xfun", "xts", "yaml", "zoo"))
install.packages("viridis")
install.packages("hrbrthemes")
install.packages("hrbrthemes")
library(viridis)
library(hrbrthemes)
library(ggplot2)
g <- ggplot(df, aes( y = Units_Sold, x = Region))
library(ggplot2)
detach("package:ggplot2", unload = TRUE)
library(shiny)
library(dplyr)
library(ggplot2)
library(hrbrthemes)
